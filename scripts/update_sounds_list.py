"""Script to fetch and process sound data from Amazon Ask Sound Library skill."""

import asyncio
from datetime import UTC, datetime
from pathlib import Path
from typing import Any, cast

import orjson

# URL of the JSON file: https://alexa.amazon.it/api/behaviors/entities?skillId=amzn1.ask.1p.sound
# need authentication in order to be downloaded
local_json_filename = "scripts/downloaded_sounds_list.json"
destination_python_filename = "src/aioamazondevices/sounds.py"
destination_strings_filename = "scripts/ha/sounds_strings.json"
destination_services_filename = "scripts/ha/sounds_services.yaml"

_LOADED_DATA_TYPE = list[dict[str, Any]]
_PROCESSED_DATA_TYPE = dict[str, str]


async def get_data() -> _LOADED_DATA_TYPE:
    """Get data from URL."""
    file = Path.open(Path(local_json_filename), mode="r", encoding="utf-8")
    data = cast("_LOADED_DATA_TYPE", orjson.loads(file.read()))
    file.close()
    return data


async def process_data(
    data: _LOADED_DATA_TYPE,
) -> _PROCESSED_DATA_TYPE:
    """Process received data."""
    results: _PROCESSED_DATA_TYPE = {}

    for item in data:
        description: str = item["displayName"]
        filename: str = item["id"]
        if item["availability"] == "AVAILABLE":
            results.update({filename: description})

    return results


async def save_data_python(data: _PROCESSED_DATA_TYPE) -> None:
    """Save data to sounds.py."""
    data_json = orjson.dumps(
        data,
        option=orjson.OPT_INDENT_2 | orjson.OPT_SORT_KEYS,
    ).decode("utf-8")
    today = datetime.now(UTC).strftime("%Y-%m-%d %H:%M")
    with Path.open(
        Path(destination_python_filename), mode="w", encoding="utf-8"
    ) as file:
        file.write(f'"""Generated by update_sounds_list.py [{today}]."""\n\n')
        file.write("SOUNDS_LIST = " + data_json)
        file.write("\n")


async def save_data_strings(data: _PROCESSED_DATA_TYPE) -> None:
    """Save data to sounds_string.json."""
    data_json = orjson.dumps(
        {"selector": {"sound": {"options": data}}},
        option=orjson.OPT_INDENT_2 | orjson.OPT_SORT_KEYS,
    ).decode("utf-8")
    with Path.open(
        Path(destination_strings_filename), mode="w", encoding="utf-8"
    ) as file:
        file.write(data_json)
        file.write("\n")


async def save_data_yaml(data: _PROCESSED_DATA_TYPE) -> None:
    """Save data to sounds_services.yaml."""
    elaborated_data = ""
    for entry in dict(sorted(data.items())):
        elaborated_data = elaborated_data + "            - " + entry + "\n"
    with Path.open(
        Path(destination_services_filename), mode="w", encoding="utf-8"
    ) as file:
        file.write("send_sound:\n")
        file.write("  fields:\n")
        file.write("    sound:\n")
        file.write("      required: true\n")
        file.write("      example: amzn_sfx_doorbell_chime\n")
        file.write("      default: amzn_sfx_doorbell_chime\n")
        file.write("      selector:\n")
        file.write("        select:\n")
        file.write("          options:\n")
        file.write(elaborated_data)
        file.write("          translation_key: sound\n")


async def main() -> None:
    """Script main execution."""
    input_data = await get_data()
    processed_data = await process_data(data=input_data)
    await save_data_python(data=processed_data)
    await save_data_strings(data=processed_data)
    await save_data_yaml(data=processed_data)


if __name__ == "__main__":
    asyncio.run(main())
